// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id                String    @id @default(cuid())

  name              String
  slug              String    @unique
  description       String
  images            String[]
  meals             MealProduct[]

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model MealProduct {
  id                String    @id @default(cuid())

  name              String
  slug              String    @unique
  description       String
  images             String[]
  price             Float
  ingredients       String[]
  category          Category @relation(fields: [categoryId], references: [id])
  categoryId        String

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(cuid()) 
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  USER
  ADMIN
  SERVICE_PROVIDER
}
 
model User {
  id                String    @id @default(cuid())
  firstName         String
  lastName          String
  email             String?   @unique
  emailVerified     DateTime?
  image             String?
  role              UserRole  @default(USER)
  password          String?
  phone             String?
  accounts          Account[]
  sessions          Session[]
  isVerified        Boolean   @default(false)
  token             Int?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}
 

